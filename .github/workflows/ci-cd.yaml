#This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# For deployment, it will be necessary to create a PyPI API token and store it as a secret
# https://docs.github.com/en/actions/reference/encrypted-secrets

name: CI/CD

on:
  release:
    types: [published]
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


permissions:
  contents: read
  pages: write
  id-token: write
env: # Define environment variables

  # Force tox and pytest to use color
  FORCE_COLOR: true
jobs:

  build:
    name: Build & verify package
    runs-on: ubuntu-latest
    permissions:
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: hynek/build-and-inspect-python-package@v2
        with:
          attest-build-provenance-github: ${{ github.event_name != 'pull_request' }}

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.13']
      fail-fast: false

    steps:

    - name: Removed unnecessary tools to free space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install Minconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-activate-base: true
        activate-environment: ""

    - name: Install fsl Packages
      run: >-
        conda install -c conda-forge -c https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public/
        ciftilib cli11 elc fsl-add_module fsl-armawrap fsl-asl_mfree fsl-avwutils fsl-base
        fsl-basil fsl-basisfield fsl-baycest fsl-bet2 fsl-bianca fsl-biancadata fsl-bint
        fsl-cluster fsl-copain fsl-cprob fsl-cudimot fsl-data_atlases
        fsl-data_atlases_xtract fsl-data_first_models_317_bin fsl-data_first_models_336_bin fsl-data_linearmni
        fsl-data_omm fsl-data_possum fsl-data_standard fsl-deface fsl-discreteopt fsl-dpm fsl-dwssfp
        fsl-easyfeat fsl-eddy fsl-eddy_qc fsl-fabber_core fsl-fabber_models_asl fsl-fabber_models_cest
        fsl-fabber_models_dce fsl-fabber_models_dsc fsl-fabber_models_dualecho fsl-fabber_models_dwi
        fsl-fabber_models_pet fsl-fabber_models_qbold fsl-fabber_models_t1 fsl-fast4 fsl-fastpdlib
        fsl-fdt fsl-feat5 fsl-film fsl-filmbabe fsl-first fsl-first_lib fsl-flameo
        fsl-flirt fsl-fnirt fsl-fugue fsl-get_standard fsl-giftiio fsl-gps
        fsl-gui-desktop fsl-installer fsl-lesions fsl-libgdc fsl-libmeshutils fsl-libvis fsl-load_dicom fsl-mcflirt
        fsl-melodic fsl-meshclass fsl-misc_c fsl-misc_scripts fsl-misc_tcl fsl-miscmaths fsl-miscvis
        fsl-mist fsl-mm fsl-msm fsl-msmreglib fsl-mvdisc fsl-nets fsl-newimage
        fsl-newmesh fsl-newnifti fsl-newran fsl-oxford_asl fsl-possum fsl-ptx2 fsl-pyfeeds
        fsl-pyfeeds-tests fsl-qboot fsl-randomise fsl-relax fsl-shapemodel fsl-siena fsl-slicetimer
        fsl-sub fsl-sub-plugin-sge fsl-sub-plugin-slurm fsl-surface fsl-susan fsl-swe fsl-tbss
        fsl-topup fsl-utils fsl-vbm fsl-verbena fsl-vtkio fsl-warpfns fsl-wire fsl-xtract fsl-xtract_data
        fsl-znzlib fsl_mrs fsl_sub fsl_sub_plugin_sge fsl_sub_plugin_slurm

    - name: Download tasks converted from Nipype
      uses: actions/download-artifact@v4
      with:
        name: converted-nipype
        path: pydra/tasks/fsl/auto

    - name: Show the contents of the auto-generated tasks
      run: tree pydra

    - name: Strip auto package from gitignore so it is included in package
      run: |
        sed -i '/\/pydra\/tasks\/fsl\/auto/d' .gitignore

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v6
    - name: Install tox
      run: |
        uv tool install tox --with=tox-uv --with=tox-gh-actions
    - name: Show tox config
      run: tox c
    - name: Run tox
      run: tox -v --exit-and-dump-after 1200
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  fileformats-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.12']
    steps:
    - uses: actions/checkout@v3
    - name: Revert version to most recent tag on upstream update
      if: github.event_name == 'repository_dispatch'
      run: git checkout $(git tag -l | tail -n 1 | awk -F post '{print $1}')
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Install task package
      run: |
        pip install "./related-packages/fileformats[test]" "./related-packages/fileformats-extras[test]"
        python -c "import fileformats.medimage_fsl as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"
    - name: Test fileformats with pytest
      run: >-
        pytest ./related-packages -sv --cov fileformats.medimage_fsl
        --cov fileformats.extras.medimage_fsl --cov-report xml .

  deploy-fileformats:
    needs: [build, test, fileformats-test]
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: python -m pip install build twine

    - name: Build source and wheel distributions
      run: python -m build ./related-packages/fileformats

    - name: Check distributions
      run: twine check ./related-packages/fileformats/dist/*

    - name: Check for PyPI token on tag
      id: deployable
      if: github.event_name == 'release' || github.event_name == 'repository_dispatch'
      env:
        PYPI_API_TOKEN: "${{ secrets.PYPI_FILEFORMATS_API_TOKEN }}"
      run: if [ -n "$PYPI_API_TOKEN" ]; then echo "DEPLOY=true" >> $GITHUB_OUTPUT; fi

    - name: Upload to PyPI
      if: steps.deployable.outputs.DEPLOY
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_FILEFORMATS_API_TOKEN }}
        packages-dir: ./related-packages/fileformats/dist

  deploy-fileformats-extras:
    needs: [deploy-fileformats]
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: python -m pip install build twine

    - name: Build source and wheel distributions
      run: python -m build ./related-packages/fileformats-extras

    - name: Check distributions
      run: twine check ./related-packages/fileformats-extras/dist/*

    - name: Check for PyPI token on tag
      id: deployable
      if: github.event_name == 'release' || github.event_name == 'repository_dispatch'
      env:
        PYPI_API_TOKEN: "${{ secrets.PYPI_FILEFORMATS_EXTRAS_API_TOKEN }}"
      run: if [ -n "$PYPI_API_TOKEN" ]; then echo "DEPLOY=true" >> $GITHUB_OUTPUT; fi

    - name: Upload to PyPI
      if: steps.deployable.outputs.DEPLOY
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_FILEFORMATS_EXTRAS_API_TOKEN }}
        packages-dir: ./related-packages/fileformats-extras/dist

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      attestations: write
      id-token: write
    steps:
    - name: Download dist
      uses: actions/download-artifact@v4
      with:
        name: Packages
        path: dist
    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

# Deploy on tags if PYPI_API_TOKEN is defined in the repository secrets.
# Secrets are not accessible in the if: condition [0], so set an output variable [1]
# [0] https://github.community/t/16928
# [1] https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter
