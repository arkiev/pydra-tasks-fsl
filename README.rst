==========================
Pydra task package for fsl
==========================

.. image:: https://github.com/nipype/pydra-fsl/actions/workflows/ci-cd.yaml/badge.svg
   :target: https://github.com/nipype/pydra-fsl/actions/workflows/ci-cd.yaml
.. image:: https://codecov.io/gh/nipype/pydra-fsl/branch/main/graph/badge.svg?token=UIS0OGPST7
   :target: https://codecov.io/gh/nipype/pydra-fsl
.. image:: https://img.shields.io/pypi/pyversions/pydra-fsl.svg
   :target: https://pypi.python.org/pypi/pydra-fsl/
   :alt: Supported Python versions
.. image:: https://img.shields.io/pypi/v/pydra-fsl.svg
   :target: https://pypi.python.org/pypi/pydra-fsl/
   :alt: Latest Version


This repository aims to be the canonical set of Pydra tasks for incorporating
`FSL <https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/>`__ tools into a Pydra workflow.

Part of this effort is to establish a (mostly) declarative language for describing tasks that
potentially have intricate rules for determining the availability and names from the choice of
inputs.


Automatically-generated vs manually-curated tasks
-------------------------------------------------

Automatically generated tasks can be found in the `pydra.tasks.fsl.auto` package.
These packages should be treated with extreme caution as they likely do not pass testing.
Generated tasks that have been edited and pass testing are imported into one or more of the
`pydra.tasks.fsl.v*` packages, corresponding to the version of the fsl toolkit
they are designed for.

Tests
-----

This package comes with a battery of automatically generated test modules. To install
the necessary dependencies to run the tests

.. code-block::

   $ pip install -e .[test]

Then the tests, including `doctests` <https://docs.python.org/3/library/doctest.html>`__, can be launched using

.. code-block::

   $ pytest --doctest-modules pydra/tasks/*

By default, the tests are set to time-out after 10s, after which the underlying tool is
assumed to have passed the validation/initialisation phase and we assume that it will
run to completion. To disable this and run the test(s) through to completion run

.. code-block::

   $ pytest --doctest-modules --timeout-pass 0 pydra/tasks/*

Continuous integration
----------------------

This template uses `GitHub Actions <https://docs.github.com/en/actions/>`__` to run tests and
deploy packages to PYPI. New packages are built and uploaded when releases are created on
GitHub, or new releases of Nipype or the Nipype2Pydra conversion tool are released.
Releases triggered by updates to Nipype or Nipype2Pydra are signified by the `postN`
suffix where `N = <nipype-version><nipype2pydra-version>` with the '.'s stripped, e.g.
`v0.2.3post185010` corresponds to the v0.2.3 tag of this repository with auto-generated
packages from Nipype 1.8.5 using Nipype2Pydra 0.1.0.


Contributing to this package
----------------------------

Developer installation
~~~~~~~~~~~~~~~~~~~~~~

Install the `fileformats <https://arcanaframework.github.io/fileformats/>`__ packages
corresponding to AFNI specific file formats


.. code-block::

   $ pip install -e ./related-packages/fileformats[dev]
   $ pip install -e ./related-packages/fileformats-extras[dev]

Install repo in developer mode from the source directory and install pre-commit to
ensure consistent code-style and quality.

.. code-block::

   $ pip install -e .[test,dev]
   $ pre-commit install

Next install the requirements for running the auto-conversion script and generate the
Pydra task interfaces from their Nipype counterparts

.. code-block::

   $ pip install -r nipype-auto-conv/requirements.txt

The run the conversion script to convert Nipype interfaces to Pydra

.. code-block::

   $ nipype-auto-conv/generate

Methodology
~~~~~~~~~~~

The development of this package is expected to have two phases

1. Where the corresponding Nipype interfaces are considered to be the ground truth, and
   the Pydra tasks are generated from them
2. When the Pydra tasks are considered be mature and they are edited by hand

Different tasks will probably mature at different times so there will probably be an
intermediate phase between 1 and 2.

Auto-conversion phase
~~~~~~~~~~~~~~~~~~~~~

The auto-converted Pydra tasks are generated from their corresponding Nipype interface
in combination with "conversion hints" contained in YAML specs
located in `nipype-auto-conv/specs/`. The self-documented conversion specs are
to be edited by hand in order to assist the auto-converter produce valid pydra tasks.
After editing one or more conversion specs the `pydra.tasks.fsl.auto` package should
be regenerated by running

.. code-block::

   $ nipype-auto-conv/generate

The tests should be run on the auto-generated tasks to see if they are valid

.. code-block::

   $ pytest --doctest-modules pydra/tasks/fsl/auto/tests/test_<the-name-of-the-task-you-edited>.py

If the test passes you should then edit the `pydra/tasks/fsl/v<tool-version>/__init__.py` file
to import the now valid task interface to signify that it has been validated and is ready
for use, e.g.

.. code-block::python

   from pydra.tasks.fsl.auto import <the-task-you-have-validated>


Typing and sample test data
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The automatically generated tests will attempt to provided the task instance to be tested
with sensible default values based on the type of the field and any constraints it has
on it. However, these will often need to be manually overridden after consulting the
underlying tool's documentation.

For file-based data, automatically generated file-system objects will be created for
selected format types, e.g. Nifti, Dicom. Therefore, it is important to specify the
format of the file using the "mime-like" string corresponding to a
`fileformats <https://github.com/ArcanaFramework/fileformats>`__ class
in the ``inputs > types`` and ``outputs > types`` dicts of the YAML spec.

If the required file-type is not found implemented within fileformats, please see the `fileformats
docs <https://arcanaframework.github.io/fileformats/developer.html>`__ for instructions on how to define
new fileformat types, and see
`fileformats-medimage-extras <https://github.com/ArcanaFramework/fileformats-medimage-extras/blob/6c2dabe91e95687eebc2639bb6f034cf9595ecfc/fileformats/extras/medimage/nifti.py#L30-L48>`__
for an example on how to implement methods to generate sample data for them.


Interface progress
==================

Below is a list of all planned interfaces, with completed interfaces checked. The list was copied from the nipype documentation at https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.fsl.html.

Preprocess
----------

- [x] ApplyWarp (`applywarp`)
- [ ] ApplyXFM (`flirt`)
- [x] BET (`bet`)
- [x] FAST (`fast`)
- [x] FIRST (`first`)
- [x] FLIRT (`flirt`)
- [x] FNIRT (`fnirt`)
- [ ] FUGUE (`fugue`)
- [x] MCFLIRT (`mcflirt`)
- [x] PRELUDE (`prelude`)
- [x] SUSAN (`susan`)
- [x] SliceTimer (`slicetimer`)

AROMA
-----

- [ ] ICA_AROMA (`ICA_AROMA.py`)

DTI
---

- [ ] BEDPOSTX / BEDPOSTX5 (`bedpostx`)
- [ ] DTIFit (`dtifit`)
- [ ] DistanceMap (`distancemap`)
- [ ] FSLXCommand (`xfibres` and `bedpost`)
- [ ] FindTheBiggest (`find_the_biggest`)
- [ ] MakeDyadicVectors (`make_dyadic_vectors`)
- [ ] ProbTrackX (`probtrackx`)
- [ ] ProbTrackX2 (`probtrackx2`)
- [ ] ProjThresh (`proj_thresh`)
- [ ] TractSkeleton (`tbss_skeleton`)
- [ ] VecReg (`vecreg`)
- [ ] XFibres / XFibres5 (`xfibres`)

EPI
---

- [ ] ApplyTOPUP (`applytopup`)
- [ ] EPIDeWarp (`epidewarp.fsl`; depreciated)
- [ ] Eddy (`eddy_openmp`)
- [ ] EddyCorrect (`eddy_correct`; depreciated)
- [ ] EddyQuad (`eddy_quad`)
- [ ] EpiReg (`epi_reg`)
- [ ] PrepareFieldmap (`fsl_prepare_fieldmap`)
- [ ] SigLoss (`sigloss`)
- [ ] TOPUP (`topup`)

FIX
---

- [ ] Classifier (`fix -c`)
- [ ] Cleaner (`fix -a`)
- [ ] FeatureExtractor (`fix -f`)
- [ ] Training (`fix -t`)
- [ ] TrainingSetCreator

Utils
-----

- [ ] AvScale (`avscale`)
- [ ] Complex (`fslcomplex`)
- [ ] ConvertWarp (`convertwarp`)
- [ ] ConvertXFM (`convert_xfm`)
- [ ] CopyGeom (`fslcpgeom`)
- [ ] ExtractROI (`fslroi`)
- [ ] FilterRegressor (`fsl_regfilt`)
- [ ] ImageMaths (`fslmaths`)
- [ ] ImageMeants (`fslmeants`)
- [ ] ImageStats (`fslstats`)
- [ ] InvWarp (`invwarp`)
- [ ] Merge (`fslmerge`)
- [ ] MotionOutliers (`fsl_motion_outliers`)
- [ ] Overlay (`overlay`)
- [ ] PlotMotionParams (`fsl_tsplot`)
- [ ] PlotTimeSeries (`fsl_tsplot`)
- [ ] PowerSpectrum (`fslpspec`)
- [ ] Reorient2Std (`fslreorient2std`)
- [ ] RobustFOV (`robustfov`)
- [ ] SigLoss (`sigloss`)
- [ ] Slice (`fslslice`)
- [ ] Slicer (`slicer`)
- [ ] Smooth (`fslmaths`)
- [ ] Split (`fslsplit`)
- [ ] SwapDimensions (`fslswapdim`)
- [ ] Text2Vest (`text2vest`)
- [ ] Vest2Text (`vest2text`)
- [ ] WarpPoints (`img2imgcoord`)
- [ ] WarpPointsFromStd (`std2imgcoord`)
- [ ] WarpPointsToStd (`img2stdcoord`)
- [ ] WarpUtils (`fnirtfileutils`)

POSSUM
------

- [ ] B0Calc (`b0calc`)

### Model

- [ ] Cluster (`cluster`)
- [ ] ContrastMgr (`contrast_mgr`)
- [ ] DualRegression (`dual_regression`)
- [ ] FEAT (`feat`)
- [ ] FEATModel (`feat_model`)
- [ ] FEATRegister
- [ ] FILMGLS (`film_gls`)
- [ ] FLAMEO (`flameo`)
- [ ] GLM (`fsl_glm`)
- [ ] L2Model
- [ ] Level1Design
- [ ] MELODIC (`melodic`)
- [ ] MultipleRegressDesign
- [ ] Randomise (`randomise`)
- [ ] SMM (`mm --ld=logdir`)
- [ ] SmoothEstimate (`smoothest`)

Maths
-----

- [ ] AR1Image (`fslmaths`)
- [ ] ApplyMask (`fslmaths`)
- [ ] BinaryMaths (`fslmaths`)
- [ ] ChangeDataType (`fslmaths`)
- [ ] DilateImage (`fslmaths`)
- [ ] ErodeImage (`fslmaths`)
- [ ] IsotropicSmooth (`fslmaths`)
- [ ] MathsCommand (`fslmaths`)
- [ ] MaxImage (`fslmaths`)
- [ ] MaxnImage (`fslmaths`)
- [ ] MeanImage (`fslmaths`)
- [ ] MedianImage (`fslmaths`)
- [ ] MinImage (`fslmaths`)
- [ ] MultiImageMaths (`fslmaths`)
- [ ] PercentileImage (`fslmaths`)
- [ ] SpatialFilter (`fslmaths`)
- [ ] StdImage (`fslmaths`)
- [ ] TemporalFilter (`fslmaths`)
- [ ] Threshold (`fslmaths`)
- [ ] UnaryMaths (`fslmaths`)
